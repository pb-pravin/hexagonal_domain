= HexagonalDomain

{<img src="https://badge.fury.io/rb/hexagonal_domain.png" alt="Gem Version" />}[http://badge.fury.io/rb/hexagonal_domain]
{<img src="https://travis-ci.org/nepalez/hexagonal_domain.svg" alt="Build Status" />}[https://travis-ci.org/nepalez/hexagonal_domain]
{<img src="https://codeclimate.com/github/nepalez/hexagonal_domain.png" />}[https://codeclimate.com/github/nepalez/hexagonal_domain]
{<img src="https://gemnasium.com/nepalez/hexagonal_domain.svg" alt="Dependency Status" />}[https://gemnasium.com/nepalez/hexagonal_domain]
{<img src="https://coveralls.io/repos/nepalez/hexagonal_domain/badge.png" alt="Coverage Status" />}[https://coveralls.io/r/nepalez/hexagonal_domain]

The module declares two basic classes to create domain models following the
Hexagonal (clean) architecture principles.

== Domain architecture review

The architecture of your domain model is expected to include those main parts:

=== Entities

Entities - classes that define only your domain entities structure, not
they behavior (ORM model, not the Active record one). They serve as a 
pure Model ("M" in MVC) level of your domain (the "O" level in ORM).

Entities know nothing about business use cases, controllers, repository etc. 
This allows to fully separate a View layer from the controller one (in MVC).
Your views will receive data only, without any assigned methods to save or
extract them from DB. They can change nothing in a database.

Entities are fully separated from DB. Special mappers should be used to
save entities to a repository or extract them out.

=== Decorators

Decorators - classes that extends entities with an additional methods needed
to your presentation layer. The "V" letter of a domain model "MVC". They
know all about Entities, but nothing about use cases.

=== Use Cases

Use Cases - the "C" letter of domain "MVC". They know about Entities and
Decorators, as far as Data Mappers. But they are fully separated from external
controllers (such as Rails Action Controller).

Use cases provide complex business logics by a controller requests and
publishes their results to corresponding listerers (publishers, loggers etc.)

=== Mappers

Data Mappers contain lower-level CRUD actions for entities. They serves as a 
domain adapters to external repositories (the "M" in ORM pattern). Mappers
provide the interface to external repository (for example to the ActiveRecord
models of a Rails App).

As an interfaces, separated from repositories, mappers can be used in
Use Cases as a part of inner Domain model functionality.

== About the gem

The gem provides basic classes for 3 of 4 parts of domain model:

* Mappers::Base - basic class for data mappers
* Decorators::Base - basic class for decorators
* UseCases::Base - basic class for use cases

To simplify development it also provides additional class

* Mappers::Simple

that provides a mapper with CRUD (find, where, save! and destroy!) methods
for entities that are mapped 1:1 to the database structure. This method 
cannot be used to map complex entities based on several database tables each.

== Mappers::Base

Base class for mapping entity to a corresponding repository.

=== Define an entity to map

Inside a mapper class declaration first define an entity class to map:

    class YourMapper < HexagonalDomain::Mappers::Base
      
      maps YourEntity
      # ...

  Usage of the mapper without an entity class defined raises an error:

    class YourMapper < HexagonalDomain::Mappers::Base
    end

    YourMapper.new # => <NotImplementedError "An entity klass to map by YourMapper hasn't been set.">

=== Define a repository to map to

You should also define a repository to map to. You should do it outside of
   the mapper class (for example, do it within a Rails App initializer):

    YourMapper.maps_to YourModel

=== Define operations

Remember, that a mapper should only provide abstract interface for a
repository, which is not a part of your domain.

Instead of concrete repository use <tt>YourMapper.repository</tt> method
to call the repository class inside the mapper.

    class YourMapper
      
      def self.find(params)
        result = repository.where(params).first

        # The result is a repository class object.
        # Convert it to the entity object:
        return entity.new result.attributes
      end
    end

=== Initialization

Initialize your mapper for an entity

    entity = YourEntity.new
    mapper = YourMapper.new entity
    mapper.save! # the method should be defined inside your mapper

Initilization initializes a repository object and assigns it to 
a @repository attribute of the mapper instance.

=== Base mapper helpers

==== #entity

An instance method to convert a repository instance to the entity

    mapper = YourMapper.new entity
    mapper.entity # => entity

    mapper.entity(YourRepository.new) # => some entity

Use it in your instance methods:

    class YourMapper
      
      def save!
        @repository.save!
        entity # => without params returns a @repository object
      end

      def destroy!
        @repository.destroy! and return entity
      end
    end

== UseCases::Base

Base class for domain model use cases, decoupled from the ActionController.

Use cases provide complex actions, presumably by user request.
They are isolated from specific controllers, following the 
"Service Object Pattern" or "Interactor Pattern" and the "Observer Pattern".

=== Usage

Inherit your use case from the class and define a #run method:

    class YourCase < HexagonalDomain::UseCases::Base
      def run
        begin
          # define actions
        rescue
          publish :error
        else
          publish :success
        end
      end
    end

For example, you can use it in a controller:

    class YourController < ActionController::Base

      # Methods to be called by user requests

      def your_case
        use_case = YourCase.new params
        use_case.subscribe self           # results will be published back to the controller
        use_case.subscribe YourLogger.new # ...and to some logger
        # ...and to anybody else (mailer etc.)
        use_case.run
      end

      # Methods to be called by use cases

      def error
        # do something
      end

      def success
        # do something
      end
    end

The controller above doesn't care about domain business logic,
it only defines who should do what, calls orders and washes its hands.

=== Note

In the example above the controller plays one more special role. It acts not
only as a controller, but as a results publisher. 

You can create a special publisher for this role and extract methods such as
<tt>error</tt> and <tt>success</tt> to that publisher, as for some logger
and mailers.

      def your_case
        use_case = YourCase.new params
        use_case.subscribe YourPublisher.new(self)
        use_case.subscribe YourLogger.new
        use_case.run
      end

Then a controller will have no other methods except for called by http requests.

== Decorators::Base

Base object for decorators.

=== Declare a class to decorate

Declares private class method <tt>decorates</tt> to define decorated
entity class:

    class MyDecorator < HexagonalDomain::Decorators::Base
      decorates MyEntity
      
      # add some methods
    end

Initializing new instance before entity definition raises an error:

    class MyDecorator < HexagonalDomain::Decorators::Base
    end

    MyDecorator.new
    # => <NotImplementedError "A class to be decorated by MyDecorator hasn't been defined yet.">

=== Initialize an instance

Give an entity to be decorated:

    entity = MyEntity.new
    decorator = MyDecorator.new entity

The entity is available for reading:

    decorator.entity

An entity should have a type, defined by <tt>decorator</tt> method. 
In case of wrong type an error is raised:

    decorator.new 1
    # => <ArgumentError "MyDecorator decorates objects of MyEntity class. Instead an object of Integer class has been given.">

=== Entity methods call

Instance methods are delegated to the entity:

    entity.name = "Some name"
    decorator = MyDecorator.new entity
    decorator.name # => entity.name     

== Installation

Add the gem to your Gemspec file:

    gem "hexagonal_domain"

Or install it manually

    gem install hexagonal_domain

== Changelog

See the CHANGELOG[link:CHANGELOG.rdoc]

== TODO

* Decouple views from the Action View

== Reading

* Uncle Bob's article {The Clean Architecture}[http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html]
* ... and his talk {Architecture the Lost Years}[http://confreaks.com/videos/759-rubymidwest2011-keynote-architecture-the-lost-years]
* Alistair Cockburn article {Hexagonal Architecture}[http://alistair.cockburn.us/Hexagonal+architecture]
* Matt Wynne's talk {Hexagonal Rails}[http://www.confreaks.com/videos/977-goruco2012-hexagonal-rails]
* Jim Weirich talk on {Decoupling from Rails}[http://www.youtube.com/watch?v=tg5RFeSfBM4]
* The great CodeClimate article {7 Patterns to Refactor Fat ActiveRecord Models}[http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/]
* Mike Ebert article {The Repository Pattern}[http://blog.8thlight.com/mike-ebert/2013/03/23/the-repository-pattern.html]

== License

This project rocks and uses MIT link:LICENSE.